version = 1

[install]
python313 = { pkg-path = "python313" }
"python313Packages.pip" = { pkg-path = "python313Packages.pip" }
"python313Packages.fastapi" = { pkg-path = "python313Packages.fastapi" }
"python313Packages.uvicorn" = { pkg-path = "python313Packages.uvicorn" }
"python313Packages.sqlalchemy" = { pkg-path = "python313Packages.sqlalchemy" }
"python313Packages.pydantic" = { pkg-path = "python313Packages.pydantic" }
"python313Packages.requests" = { pkg-path = "python313Packages.requests" }
"python313Packages.beautifulsoup4" = { pkg-path = "python313Packages.beautifulsoup4" }
"python313Packages.anthropic" = { pkg-path = "python313Packages.anthropic" }
"python313Packages.pandas" = { pkg-path = "python313Packages.pandas" }
"python313Packages.numpy" = { pkg-path = "python313Packages.numpy" }
"python313Packages.python-multipart" = { pkg-path = "python313Packages.python-multipart" }
"python313Packages.pydantic-settings" = { pkg-path = "python313Packages.pydantic-settings" }
"python313Packages.gitpython" = { pkg-path = "python313Packages.gitpython" }
"python313Packages.toml" = { pkg-path = "python313Packages.toml" }
"python313Packages.pyyaml" = { pkg-path = "python313Packages.pyyaml" }
"python313Packages.python-dotenv" = { pkg-path = "python313Packages.python-dotenv" }
"python313Packages.structlog" = { pkg-path = "python313Packages.structlog" }
"python313Packages.chromadb" = { pkg-path = "python313Packages.chromadb" }
"python313Packages.sentence-transformers" = { pkg-path = "python313Packages.sentence-transformers" }
"python313Packages.tiktoken" = { pkg-path = "python313Packages.tiktoken" }
nodejs = { pkg-path = "nodejs" }
git = { pkg-path = "git" }
curl = { pkg-path = "curl" }
sqlite = { pkg-path = "sqlite" }
jq = { pkg-path = "jq" }
tree = { pkg-path = "tree" }
fastapi.pkg-path = "python313Packages.fastapi"
uvicorn.pkg-path = "python313Packages.uvicorn"
sqlalchemy.pkg-path = "python313Packages.sqlalchemy"
pydantic.pkg-path = "python313Packages.pydantic"
requests.pkg-path = "python313Packages.requests"
beautifulsoup4.pkg-path = "python313Packages.beautifulsoup4"
anthropic.pkg-path = "python313Packages.anthropic"
pandas.pkg-path = "python313Packages.pandas"
numpy.pkg-path = "python313Packages.numpy"
python-multipart.pkg-path = "python313Packages.python-multipart"
pydantic-settings.pkg-path = "python313Packages.pydantic-settings"
gitpython.pkg-path = "python313Packages.gitpython"
toml.pkg-path = "python313Packages.toml"
pyyaml.pkg-path = "python313Packages.pyyaml"
python-dotenv.pkg-path = "python313Packages.python-dotenv"
structlog.pkg-path = "python313Packages.structlog"
chromadb.pkg-path = "python313Packages.chromadb"
sentence-transformers.pkg-path = "python313Packages.sentence-transformers"
tiktoken.pkg-path = "python313Packages.tiktoken"

[vars]
FLOXAI_VERSION = "1.0.2"
FLOXAI_API_PORT = "8000"
FLOXAI_UI_PORT = "3000"
# CLAUDE_API_KEY will be prompted for interactively - do not store in manifest
FLOXAI_DB_PATH = "$FLOX_ENV_PROJECT/data/floxai.db"
FLOXAI_VECTOR_DB_PATH = "$FLOX_ENV_PROJECT/data/vector_db"
FLOXAI_DOCS_PATH = "$FLOX_ENV_PROJECT/data/flox_docs"
FLOXAI_PROJECT_ROOT = "$FLOX_ENV_PROJECT"
FLOXAI_DEV_MODE = "false"
FLOXAI_LOG_LEVEL = "INFO"
PYTHONPATH = "$FLOX_ENV_PROJECT/backend:$PYTHONPATH"

[hook]
on-activate = '''
echo ""
echo "  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó"
echo "  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë"
echo "  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë"
echo "  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë"
echo "  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë"
echo "  ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù"
echo "  The Flox Development Co-pilot"
echo ""
echo "  üéØ Showcasing Flox for reproducible development!"
echo "  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo ""
echo "  üì¶ FLOX ENVIRONMENT:"
echo "     Name:     $FLOX_ENV_NAME"
echo "     Path:     $FLOX_ENV_PROJECT"
echo "     Python:   $(python3 --version 2>&1) [Flox-managed]"
echo "     Node:     $(node --version 2>&1) [Flox-managed]"
echo "     Platform: $(uname -m)-$(uname -s | tr [:upper:] [:lower:])"
echo ""
echo "  üåü FLOX ADVANTAGES:"
echo "     ‚úì Cross-platform (macOS/Linux)"
echo "     ‚úì No Docker required"
echo "     ‚úì Native performance"
echo "     ‚úì Reproducible everywhere"
echo ""

# Setup Claude API key interactively if needed
if [ -f "$FLOX_ENV_PROJECT/scripts/setup-claude-key.sh" ]; then
  source "$FLOX_ENV_PROJECT/scripts/setup-claude-key.sh"
fi

# Auto-clone FloxAI source code if not present
if [ ! -f "$FLOX_ENV_PROJECT/README.md" ]; then
  echo "  üì¶ Downloading FloxAI source code..."
  if command -v git >/dev/null 2>&1; then
    # Try cloning without authentication first (works if repo is public)
    if git clone https://github.com/8BitTacoSupreme/floxai.git /tmp/floxai-source 2>/dev/null; then
      cp -r /tmp/floxai-source/* $FLOX_ENV_PROJECT/ 2>/dev/null || true
      cp -r /tmp/floxai-source/.* $FLOX_ENV_PROJECT/ 2>/dev/null || true
      rm -rf /tmp/floxai-source
      echo "  ‚úÖ FloxAI source code downloaded!"
    else
      echo "  ‚ö†Ô∏è  Could not download source code automatically"
      echo "      Please run: git clone https://github.com/8BitTacoSupreme/floxai.git ."
      echo "      Or make the repository public for automatic downloads"
    fi
  else
    echo "  ‚ö†Ô∏è  Git not available - please manually clone the repository"
  fi
fi

mkdir -p $FLOX_ENV_PROJECT/data/vector_db $FLOX_ENV_PROJECT/data/flox_docs

# Only install dependencies if source code is present
if [ -f "$FLOX_ENV_PROJECT/backend/requirements.txt" ]; then
  if [ ! -f "$FLOX_ENV_PROJECT/.flox-py-deps" ]; then
    echo "  üì¶ Installing Python dependencies..."
    python3 -m pip install --upgrade pip --user
    python3 -m pip install -r $FLOX_ENV_PROJECT/backend/requirements.txt --user
    touch $FLOX_ENV_PROJECT/.flox-py-deps
    echo "  ‚úÖ Python dependencies ready!"
  fi
else
  echo "  ‚ö†Ô∏è  Skipping Python dependencies - source code not available"
fi

if [ -d "$FLOX_ENV_PROJECT/frontend" ]; then
  if [ ! -d "$FLOX_ENV_PROJECT/frontend/node_modules" ]; then
    echo "  üì¶ Installing Node.js dependencies..."
    cd $FLOX_ENV_PROJECT/frontend && npm install && cd $FLOX_ENV_PROJECT
    echo "  ‚úÖ Node.js dependencies ready!"
  fi
else
  echo "  ‚ö†Ô∏è  Skipping Node.js dependencies - frontend directory not available"
fi

if command -v tree >/dev/null 2>&1; then
  echo ""
  echo "  üå≥ PROJECT STRUCTURE:"
  tree -L 2 -I "node_modules|__pycache__|.venv" $FLOX_ENV_PROJECT | head -15
fi

echo ""
echo "  üöÄ FLOXAI MODES:"
echo "     floxai-setup  - Interactive setup & initialization"
echo "     floxybot      - Standalone mode (general Flox/Nix AI)"
echo "     floxybotdev   - Context-aware development mode" 
echo "     floxai-demo   - Flox capabilities showcase"
echo ""
echo "  üí° Next: Your Claude API key will be prompted for when needed"
echo ""
echo "  üöÄ Quick Start:"
echo "     floxai        - Start complete FloxAI system"
echo "     start-floxai  - Alternative start command"
echo "     floxybot      - Standalone mode"
echo "     floxybotdev   - Context-aware mode"
echo ""
echo "  üîê Security: API keys are never stored in git or shared publicly"
echo ""
'''

[profile]
common = '''
export PATH="$FLOX_ENV_PROJECT/scripts:$FLOX_ENV_PROJECT:$PATH"
alias floxstatus="echo Flox Environment: $FLOX_ENV_NAME && flox list"
alias floxinfo="echo FloxAI v$FLOXAI_VERSION | Environment: $FLOX_ENV_NAME"
alias backend="cd $FLOX_ENV_PROJECT/backend"
alias frontend="cd $FLOX_ENV_PROJECT/frontend"
alias floxai="echo Starting FloxAI... && $FLOX_ENV_PROJECT/floxai-start"
alias start-floxai="echo Starting FloxAI... && $FLOX_ENV_PROJECT/floxai-start"
'''

