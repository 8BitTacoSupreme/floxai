#!/bin/bash
set -e

echo "🔧 FloxAI Initial Setup - Powered by Flox"
echo "=========================================="

if [ -z "$FLOX_ENV" ]; then
    echo "❌ FloxAI must be run inside a Flox environment"
    echo "   Run: flox activate"
    exit 1
fi

echo "📊 Current Flox Environment:"
echo "   Environment: $FLOX_ENV_NAME"
echo "   Project Dir: $FLOX_ENV_PROJECT"
echo "   Python: $(python3 --version 2>&1 | head -1)"
echo "   Node.js: $(node --version)"
echo "   Platform: $(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]')"
echo ""

# Check for existing setup
if [ -f "$FLOX_ENV_PROJECT/data/floxai.db" ]; then
    echo "⚠️  FloxAI appears to already be set up."
    read -p "Do you want to reinitialize? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Setup cancelled."
        exit 0
    fi
fi

# Prompt for Claude API key
echo "🔑 Claude API Key Configuration"
echo "================================"
echo "FloxAI uses Claude AI for intelligent assistance."
echo "You can get a free API key from: https://console.anthropic.com/"
echo ""

if [ -n "$CLAUDE_API_KEY" ]; then
    echo "✅ Claude API key already set in environment"
    USE_EXISTING_KEY="y"
else
    echo "No Claude API key found in environment."
    read -p "Do you have a Claude API key to configure? (Y/n): " -n 1 -r
    echo
    USE_EXISTING_KEY=${REPLY:-y}
fi

if [[ $USE_EXISTING_KEY =~ ^[Yy]$ ]] && [ -z "$CLAUDE_API_KEY" ]; then
    echo "Please enter your Claude API key (it will not be displayed):"
    read -s CLAUDE_API_KEY
    echo ""
    if [ -n "$CLAUDE_API_KEY" ]; then
        export CLAUDE_API_KEY
        echo "✅ Claude API key configured for this session"
        echo ""
        echo "💡 To persist this key, add it to your manifest.toml:"
        echo '   [vars]'
        echo "   CLAUDE_API_KEY = \"$CLAUDE_API_KEY\""
        echo ""
    fi
elif [ -z "$CLAUDE_API_KEY" ]; then
    echo "⚠️  No Claude API key configured - FloxAI will run with limited functionality"
    echo "   You can add it later by setting CLAUDE_API_KEY environment variable"
    echo ""
fi

echo "📁 Creating FloxAI data directories..."
mkdir -p data/vector_db data/flox_docs data/uploads

echo "💾 Initializing database..."
python3 -c "
import sys
sys.path.insert(0, '$FLOX_ENV_PROJECT/backend')
from app.db.database import init_db
init_db()
print('   ✅ Database initialized')
"

echo "📚 Seeding FloxAI Knowledge Base..."
echo "   This may take a few minutes on first run..."

# Check if knowledge base is already seeded
if [ -d "$FLOX_ENV_PROJECT/data/flox_docs/blogs" ] && [ -f "$FLOX_ENV_PROJECT/data/flox_docs/blogs/README.md" ]; then
    echo "   ✅ Knowledge base already seeded"
    echo "   📊 Found $(find $FLOX_ENV_PROJECT/data/flox_docs -name "*.md" | wc -l | tr -d ' ') documentation files"
else
    echo "   🌱 First-time setup: Seeding comprehensive knowledge base..."
    
    # Run blog ingestion for latest Flox content
    if [ -f "$FLOX_ENV_PROJECT/ingest_flox_blogs.py" ]; then
        echo "   📰 Ingesting Flox blog posts..."
        python3 "$FLOX_ENV_PROJECT/ingest_flox_blogs.py" || {
            echo "   ⚠️  Blog ingestion encountered issues (continuing anyway)"
        }
    fi
    
    # Run documentation update
    if [ -f "$FLOX_ENV_PROJECT/update_docs.sh" ]; then
        echo "   📖 Updating Flox documentation..."
        bash "$FLOX_ENV_PROJECT/update_docs.sh" || {
            echo "   ⚠️  Documentation update encountered issues (continuing anyway)"
        }
    else
        # Create basic documentation if update script not available
        echo "   📝 Creating basic documentation..."
        mkdir -p data/flox_docs
        cat > data/flox_docs/flox-overview.md << 'DOCEOF'
# Flox Overview
Flox creates reproducible development environments.

## Key Benefits
- Reproducible environments
- Cross-platform support  
- Native performance
- Simple manifest.toml configuration

## Getting Started
1. Create a new environment: `flox init`
2. Add packages: `flox install python nodejs`
3. Activate environment: `flox activate`
4. Your development environment is ready!
DOCEOF
        
        cat > data/flox_docs/getting-started.md << 'DOCEOF'
# Getting Started with Flox

## Installation
Visit https://flox.dev/docs/install for installation instructions.

## Basic Commands
- `flox init` - Initialize a new environment
- `flox install <package>` - Add packages
- `flox activate` - Enter the environment
- `flox list` - Show installed packages
- `flox search <term>` - Search for packages
DOCEOF
        echo "   ✅ Basic documentation created"
    fi
    
    echo "   📊 Knowledge base seeded with $(find $FLOX_ENV_PROJECT/data/flox_docs -name "*.md" | wc -l | tr -d ' ') files"
fi

# Run vectorization if not already done
echo "🧠 Setting up Vector RAG System..."
if [ -f "$FLOX_ENV_PROJECT/migrate_to_vector_rag.py" ]; then
    if [ -d "$FLOX_ENV_PROJECT/data/vector_db" ] && [ "$(ls -A $FLOX_ENV_PROJECT/data/vector_db 2>/dev/null)" ]; then
        echo "   ✅ Vector database already exists"
    else
        echo "   🔄 Creating vector embeddings (this may take a few minutes)..."
        python3 "$FLOX_ENV_PROJECT/migrate_to_vector_rag.py" || {
            echo "   ⚠️  Vectorization encountered issues (continuing anyway)"
        }
    fi
else
    echo "   ⚠️  Vector RAG script not found, skipping vectorization"
fi

# Set up automated updates in manifest.toml
echo "⚙️  Configuring automated updates..."
MANIFEST_FILE="$FLOX_ENV_PROJECT/.flox/env/manifest.toml"
if [ -f "$MANIFEST_FILE" ]; then
    # Check if update hook already exists
    if ! grep -q "update_docs.sh" "$MANIFEST_FILE"; then
        echo "   📝 Adding automated update configuration to manifest.toml..."
        
        # Add update hook to manifest
        cat >> "$MANIFEST_FILE" << 'MANIFESTEOF'

# FloxAI automated updates
[hook]
onActivate = """
# Check if FloxAI data needs updating (every 7 days)
FLOXAI_DATA_DIR="$FLOX_ENV_PROJECT/data"
UPDATE_FLAG="$FLOXAI_DATA_DIR/.last_update"
CURRENT_TIME=$(date +%s)
LAST_UPDATE=0

if [ -f "$UPDATE_FLAG" ]; then
    LAST_UPDATE=$(cat "$UPDATE_FLAG" 2>/dev/null || echo "0")
fi

# Update if more than 7 days old (604800 seconds)
if [ $((CURRENT_TIME - LAST_UPDATE)) -gt 604800 ]; then
    echo "🔄 FloxAI: Checking for documentation updates..."
    if [ -f "$FLOX_ENV_PROJECT/update_docs.sh" ]; then
        # Run in background to avoid blocking activation
        (cd "$FLOX_ENV_PROJECT" && ./update_docs.sh --vector-only > /dev/null 2>&1 &)
        echo "$CURRENT_TIME" > "$UPDATE_FLAG"
    fi
fi
"""
MANIFESTEOF
        echo "   ✅ Automated updates configured (runs every 7 days)"
    else
        echo "   ✅ Automated updates already configured"
    fi
else
    echo "   ⚠️  Manifest file not found, skipping automated update setup"
fi

# Create a manual update command
echo "🔧 Creating manual update command..."
cat > "$FLOX_ENV_PROJECT/floxai-update" << 'UPDATEEOF'
#!/bin/bash
# FloxAI Manual Update Command
echo "🔄 FloxAI: Updating documentation and vector database..."
cd "$FLOX_ENV_PROJECT"
if [ -f "update_docs.sh" ]; then
    ./update_docs.sh
    echo "✅ FloxAI update completed"
else
    echo "❌ Update script not found"
fi
UPDATEEOF
chmod +x "$FLOX_ENV_PROJECT/floxai-update"

# Set up environment validation
echo "🔍 Setting up environment validation..."
cat > "$FLOX_ENV_PROJECT/floxai-check" << 'CHECKEOF'
#!/bin/bash
# FloxAI Environment Health Check
echo "🔍 FloxAI Environment Health Check"
echo "=================================="

# Check Flox environment
if [ -n "$FLOX_ENV" ]; then
    echo "✅ Flox environment active: $FLOX_ENV_NAME"
else
    echo "❌ No Flox environment active"
    exit 1
fi

# Check Claude API key
if [ -n "$CLAUDE_API_KEY" ]; then
    echo "✅ Claude API key configured"
else
    echo "⚠️  Claude API key not set (limited functionality)"
fi

# Check data directory
if [ -d "$FLOX_ENV_PROJECT/data" ]; then
    echo "✅ Data directory exists"
    DOC_COUNT=$(find "$FLOX_ENV_PROJECT/data/flox_docs" -name "*.md" 2>/dev/null | wc -l | tr -d ' ')
    echo "   📚 Documentation files: $DOC_COUNT"
else
    echo "❌ Data directory missing"
fi

# Check vector database
if [ -d "$FLOX_ENV_PROJECT/data/vector_db" ] && [ "$(ls -A $FLOX_ENV_PROJECT/data/vector_db 2>/dev/null)" ]; then
    echo "✅ Vector database exists"
else
    echo "⚠️  Vector database missing or empty"
fi

# Check backend dependencies
echo "🔧 Backend Dependencies:"
python3 -c "import fastapi, uvicorn, chromadb, sentence_transformers; print('✅ All backend dependencies available')" 2>/dev/null || {
    echo "❌ Missing backend dependencies"
    echo "   Run: flox install to install required packages"
}

# Check frontend dependencies
if [ -d "$FLOX_ENV_PROJECT/frontend/node_modules" ]; then
    echo "✅ Frontend dependencies installed"
else
    echo "⚠️  Frontend dependencies missing"
    echo "   Run: cd frontend && npm install"
fi

echo ""
echo "🎯 FloxAI Status: Ready to use!"
CHECKEOF
chmod +x "$FLOX_ENV_PROJECT/floxai-check"

# Create a quick start guide
echo "📖 Creating quick start guide..."
cat > "$FLOX_ENV_PROJECT/QUICKSTART.md" << 'GUIDEEOF'
# FloxAI Quick Start Guide

## 🚀 Getting Started

### 1. Check Your Setup
```bash
./floxai-check
```

### 2. Choose Your Mode

#### L1/L2 Support (General Questions)
```bash
./floxybot
```
- General Flox/Nix questions
- Troubleshooting help
- Best practices guidance

#### L3 Resident Engineer (Environment Work)
```bash
floxai --layer
```
- Analyze current environment
- Suggest improvements
- Hands-on assistance

#### Interactive Learning Journey
```bash
./flox-demo
```
- Learn Flox step-by-step
- Build projects from scratch
- Explore all features

### 3. Keep Updated
```bash
./floxai-update
```

## 🔧 Troubleshooting

- **Backend not starting**: Check `./floxai-check`
- **Missing dependencies**: Run `flox install`
- **API errors**: Verify `CLAUDE_API_KEY` is set
- **No responses**: Check if vector database exists

## 📚 More Information

- Full documentation: `README.md`
- API docs: http://localhost:8000/docs (when running)
- Health check: http://localhost:8000/health (when running)
GUIDEEOF

echo ""
echo "🎉 FloxAI Setup Complete!"
echo "========================================"
echo ""
echo "🚀 Ready to use FloxAI:"
echo ""
echo "   📖 L1/L2 Support (General Flox/Nix AI):"
echo "      ./floxybot"
echo ""
echo "   🔧 L3 Resident Engineer (Environment-specific):"
echo "      floxai --layer"
echo ""
echo "   🎯 Interactive Learning Journey:"
echo "      ./flox-demo"
echo ""
echo "   🔄 Manual Update (when needed):"
echo "      ./floxai-update"
echo ""
if [ -n "$CLAUDE_API_KEY" ]; then
    echo "✅ Claude AI integration ready!"
else
    echo "💡 For full AI features, set CLAUDE_API_KEY and re-run setup"
fi
echo ""
