version = 1

[install]
python313 = { pkg-path = "python313" }
"python313Packages.pip" = { pkg-path = "python313Packages.pip" }
"python313Packages.fastapi" = { pkg-path = "python313Packages.fastapi" }
"python313Packages.uvicorn" = { pkg-path = "python313Packages.uvicorn" }
"python313Packages.sqlalchemy" = { pkg-path = "python313Packages.sqlalchemy" }
"python313Packages.pydantic" = { pkg-path = "python313Packages.pydantic" }
"python313Packages.requests" = { pkg-path = "python313Packages.requests" }
"python313Packages.beautifulsoup4" = { pkg-path = "python313Packages.beautifulsoup4" }
"python313Packages.anthropic" = { pkg-path = "python313Packages.anthropic" }
"python313Packages.pandas" = { pkg-path = "python313Packages.pandas" }
"python313Packages.numpy" = { pkg-path = "python313Packages.numpy" }
"python313Packages.python-multipart" = { pkg-path = "python313Packages.python-multipart" }
"python313Packages.pydantic-settings" = { pkg-path = "python313Packages.pydantic-settings" }
"python313Packages.gitpython" = { pkg-path = "python313Packages.gitpython" }
"python313Packages.toml" = { pkg-path = "python313Packages.toml" }
"python313Packages.pyyaml" = { pkg-path = "python313Packages.pyyaml" }
"python313Packages.python-dotenv" = { pkg-path = "python313Packages.python-dotenv" }
"python313Packages.structlog" = { pkg-path = "python313Packages.structlog" }
"python313Packages.chromadb" = { pkg-path = "python313Packages.chromadb" }
"python313Packages.sentence-transformers" = { pkg-path = "python313Packages.sentence-transformers" }
"python313Packages.tiktoken" = { pkg-path = "python313Packages.tiktoken" }
nodejs = { pkg-path = "nodejs" }
git = { pkg-path = "git" }
curl = { pkg-path = "curl" }
sqlite = { pkg-path = "sqlite" }
jq = { pkg-path = "jq" }
tree = { pkg-path = "tree" }
fastapi.pkg-path = "python313Packages.fastapi"
uvicorn.pkg-path = "python313Packages.uvicorn"
sqlalchemy.pkg-path = "python313Packages.sqlalchemy"
pydantic.pkg-path = "python313Packages.pydantic"
requests.pkg-path = "python313Packages.requests"
beautifulsoup4.pkg-path = "python313Packages.beautifulsoup4"
anthropic.pkg-path = "python313Packages.anthropic"
pandas.pkg-path = "python313Packages.pandas"
numpy.pkg-path = "python313Packages.numpy"
python-multipart.pkg-path = "python313Packages.python-multipart"
pydantic-settings.pkg-path = "python313Packages.pydantic-settings"
gitpython.pkg-path = "python313Packages.gitpython"
toml.pkg-path = "python313Packages.toml"
pyyaml.pkg-path = "python313Packages.pyyaml"
python-dotenv.pkg-path = "python313Packages.python-dotenv"
structlog.pkg-path = "python313Packages.structlog"
chromadb.pkg-path = "python313Packages.chromadb"
sentence-transformers.pkg-path = "python313Packages.sentence-transformers"
tiktoken.pkg-path = "python313Packages.tiktoken"

[vars]
FLOXAI_VERSION = "1.0.2"
FLOXAI_API_PORT = "8000"
FLOXAI_UI_PORT = "3000"
# CLAUDE_API_KEY will be prompted for interactively - do not store in manifest
FLOXAI_DB_PATH = "$FLOX_ENV_PROJECT/data/floxai.db"
FLOXAI_VECTOR_DB_PATH = "$FLOX_ENV_PROJECT/data/vector_db"
FLOXAI_DOCS_PATH = "$FLOX_ENV_PROJECT/data/flox_docs"
FLOXAI_PROJECT_ROOT = "$FLOX_ENV_PROJECT"
FLOXAI_DEV_MODE = "false"
FLOXAI_LOG_LEVEL = "INFO"
PYTHONPATH = "$FLOX_ENV_PROJECT/backend:$PYTHONPATH"

[hook]
on-activate = '''
echo ""
echo "  ███████╗██╗      ██████╗ ██╗  ██╗ █████╗ ██╗"
echo "  ██╔════╝██║     ██╔═══██╗╚██╗██╔╝██╔══██╗██║"
echo "  █████╗  ██║     ██║   ██║ ╚███╔╝ ███████║██║"
echo "  ██╔══╝  ██║     ██║   ██║ ██╔██╗ ██╔══██║██║"
echo "  ██║     ███████╗╚██████╔╝██╔╝ ██╗██║  ██║██║"
echo "  ╚═╝     ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝"
echo "  The Flox Development Co-pilot"
echo ""
echo "  🎯 Showcasing Flox for reproducible development!"
echo "  ═══════════════════════════════════════════════"
echo ""
echo "  📦 FLOX ENVIRONMENT:"
echo "     Name:     $FLOX_ENV_NAME"
echo "     Path:     $FLOX_ENV_PROJECT"
echo "     Python:   $(python3 --version 2>&1) [Flox-managed]"
echo "     Node:     $(node --version 2>&1) [Flox-managed]"
echo "     Platform: $(uname -m)-$(uname -s | tr [:upper:] [:lower:])"
echo ""
echo "  🌟 FLOX ADVANTAGES:"
echo "     ✓ Cross-platform (macOS/Linux)"
echo "     ✓ No Docker required"
echo "     ✓ Native performance"
echo "     ✓ Reproducible everywhere"
echo ""

# Setup Claude API key interactively if needed (only check, don't prompt during activation)
if [ -f "$FLOX_ENV_PROJECT/scripts/setup-claude-key.sh" ]; then
  source "$FLOX_ENV_PROJECT/scripts/setup-claude-key.sh"
  # Only check for existing key during activation, don't prompt
  check_existing_key >/dev/null 2>&1 || true
fi

# Auto-clone FloxAI source code if not present
if [ ! -f "$FLOX_ENV_PROJECT/README.md" ]; then
  echo "  📦 Downloading FloxAI source code..."
  if command -v git >/dev/null 2>&1; then
    # Try cloning without authentication first (works if repo is public)
    if git clone https://github.com/8BitTacoSupreme/floxai.git /tmp/floxai-source 2>/dev/null; then
      cp -r /tmp/floxai-source/* $FLOX_ENV_PROJECT/ 2>/dev/null || true
      cp -r /tmp/floxai-source/.* $FLOX_ENV_PROJECT/ 2>/dev/null || true
      rm -rf /tmp/floxai-source
      echo "  ✅ FloxAI source code downloaded!"
    else
      echo "  ⚠️  Could not download source code automatically"
      echo "      Please run: git clone https://github.com/8BitTacoSupreme/floxai.git ."
      echo "      Or make the repository public for automatic downloads"
    fi
  else
    echo "  ⚠️  Git not available - please manually clone the repository"
  fi
fi

mkdir -p $FLOX_ENV_PROJECT/data/vector_db $FLOX_ENV_PROJECT/data/flox_docs

# Only install dependencies if source code is present
if [ -f "$FLOX_ENV_PROJECT/backend/requirements.txt" ]; then
  if [ ! -f "$FLOX_ENV_PROJECT/.flox-py-deps" ]; then
    echo "  📦 Installing Python dependencies..."
    python3 -m pip install --upgrade pip --user
    python3 -m pip install -r $FLOX_ENV_PROJECT/backend/requirements.txt --user
    touch $FLOX_ENV_PROJECT/.flox-py-deps
    echo "  ✅ Python dependencies ready!"
  fi
else
  echo "  ⚠️  Skipping Python dependencies - source code not available"
fi

if [ -d "$FLOX_ENV_PROJECT/frontend" ]; then
  if [ ! -d "$FLOX_ENV_PROJECT/frontend/node_modules" ]; then
    echo "  📦 Installing Node.js dependencies..."
    cd $FLOX_ENV_PROJECT/frontend && npm install && cd $FLOX_ENV_PROJECT
    echo "  ✅ Node.js dependencies ready!"
  fi
else
  echo "  ⚠️  Skipping Node.js dependencies - frontend directory not available"
fi

if command -v tree >/dev/null 2>&1; then
  echo ""
  echo "  🌳 PROJECT STRUCTURE:"
  tree -L 2 -I "node_modules|__pycache__|.venv" $FLOX_ENV_PROJECT | head -15
fi

echo ""
echo "  🚀 FLOXAI MODES:"
echo "     floxai-setup  - Interactive setup & initialization"
echo "     floxybot      - Standalone mode (general Flox/Nix AI)"
echo "     floxybotdev   - Context-aware development mode" 
echo "     floxai-demo   - Flox capabilities showcase"
echo ""
echo "  💡 Next: Your Claude API key will be prompted for when needed"
echo ""
echo "  🚀 Quick Start:"
echo "     floxai        - Start complete FloxAI system"
echo "     start-floxai  - Alternative start command"
echo "     floxybot      - Standalone mode"
echo "     floxybotdev   - Context-aware mode"
echo ""
echo "  🔐 Security: API keys are never stored in git or shared publicly"
echo ""
'''

[profile]
common = '''
export PATH="$FLOX_ENV_PROJECT/scripts:$FLOX_ENV_PROJECT:$PATH"
alias floxstatus="echo Flox Environment: $FLOX_ENV_NAME && flox list"
alias floxinfo="echo FloxAI v$FLOXAI_VERSION | Environment: $FLOX_ENV_NAME"
alias backend="cd $FLOX_ENV_PROJECT/backend"
alias frontend="cd $FLOX_ENV_PROJECT/frontend"
alias floxai="echo Starting FloxAI... && $FLOX_ENV_PROJECT/floxai-start"
alias start-floxai="echo Starting FloxAI... && $FLOX_ENV_PROJECT/floxai-start"
'''

# FloxAI Modular Components
[build.floxai-base]
description = "FloxAI Base - Core runtime and dependencies"
version = "1.0.3"
command = '''
echo "🔧 Building FloxAI Base Component..."
mkdir -p $out/bin $out/share/floxai

# Base component entry point
cat > $out/bin/floxai-base << 'EOF'
#!/bin/bash
echo "FloxAI Base Component v1.0.3"
echo "Provides: Python 3.13, FastAPI, Node.js, Git, Core utilities"
echo "Usage: Layer this environment for FloxAI development"
echo "Next: Add floxai-rag, floxai-llm, or other components as needed"
EOF
chmod +x $out/bin/floxai-base

# Component metadata
cat > $out/share/floxai/base-info.json << 'EOF'
{
  "name": "floxai-base",
  "version": "1.0.3",
  "description": "Core runtime and dependencies for FloxAI",
  "provides": ["python313", "fastapi", "nodejs", "git", "sqlite"],
  "layerable": true,
  "composes_with": ["floxai-rag", "floxai-llm", "floxai-docs"]
}
EOF

echo "✅ FloxAI Base component built successfully"
'''

[build.floxai-rag]
description = "FloxAI RAG - Knowledge base and vector search"
version = "1.0.3"
command = '''
echo "🔧 Building FloxAI RAG Component..."
mkdir -p $out/bin $out/share/floxai $out/lib/python/floxai

# Copy RAG service
cp -r backend/app/services/rag_service.py $out/lib/python/floxai/
cp -r backend/app/services/embedding_service.py $out/lib/python/floxai/ 2>/dev/null || true
cp -r backend/app/services/vector_rag_service.py $out/lib/python/floxai/ 2>/dev/null || true
cp -r backend/app/services/document_processor.py $out/lib/python/floxai/ 2>/dev/null || true

# RAG component entry point
cat > $out/bin/floxai-rag << 'EOF'
#!/bin/bash
echo "FloxAI RAG Component v1.0.3"
echo "Provides: ChromaDB, Sentence Transformers, Document Processing"
echo "Features: Vector embeddings, semantic search, document ingestion"
echo "Usage: Layer on floxai-base for knowledge base functionality"
EOF
chmod +x $out/bin/floxai-rag

# Component metadata
cat > $out/share/floxai/rag-info.json << 'EOF'
{
  "name": "floxai-rag",
  "version": "1.0.3",
  "description": "RAG service with vector embeddings and semantic search",
  "provides": ["chromadb", "sentence-transformers", "tiktoken"],
  "requires": ["floxai-base"],
  "layerable": true
}
EOF

echo "✅ FloxAI RAG component built successfully"
'''

[build.floxai-llm]
description = "FloxAI LLM - Claude integration and AI services"
version = "1.0.3"
command = '''
echo "🔧 Building FloxAI LLM Component..."
mkdir -p $out/bin $out/share/floxai $out/lib/python/floxai

# Copy LLM service
cp backend/app/services/llm_service.py $out/lib/python/floxai/
cp scripts/setup-claude-key.sh $out/bin/

# LLM component entry point
cat > $out/bin/floxai-llm << 'EOF'
#!/bin/bash
echo "FloxAI LLM Component v1.0.3"
echo "Provides: Claude Sonnet 4, Anthropic API integration"
echo "Features: Secure API key management, LLM conversations"
echo "Usage: Layer on floxai-base for AI chat functionality"
EOF
chmod +x $out/bin/floxai-llm

# Component metadata
cat > $out/share/floxai/llm-info.json << 'EOF'
{
  "name": "floxai-llm",
  "version": "1.0.3",
  "description": "Claude LLM integration with secure API key management",
  "provides": ["anthropic", "claude-sonnet-4"],
  "requires": ["floxai-base"],
  "layerable": true,
  "secure_config": true
}
EOF

echo "✅ FloxAI LLM component built successfully"
'''

[build.floxai-complete]
description = "Complete FloxAI system - All components integrated"
version = "1.0.3"
command = '''
echo "🔧 Building Complete FloxAI System..."
mkdir -p $out/bin $out/share/floxai $out/lib/python/floxai $out/frontend

# Copy all backend services
cp -r backend/* $out/lib/python/floxai/

# Copy frontend
cp -r frontend/* $out/frontend/ 2>/dev/null || echo "Frontend not found, skipping"

# Copy scripts
cp -r scripts/* $out/bin/ 2>/dev/null || true
cp floxai-setup $out/bin/ 2>/dev/null || true
cp floxai-start $out/bin/ 2>/dev/null || true

# Main entry point
cat > $out/bin/floxai << 'EOF'
#!/bin/bash
echo "FloxAI Complete System v1.0.3"
echo "All components: Base + RAG + LLM + Frontend + Documentation"
echo "Ready to use as development co-pilot"
echo "Run: floxai-setup to initialize"
EOF
chmod +x $out/bin/floxai

# Complete system metadata
cat > $out/share/floxai/complete-info.json << 'EOF'
{
  "name": "floxai-complete",
  "version": "1.0.3",
  "description": "Complete FloxAI development co-pilot system",
  "includes": ["floxai-base", "floxai-rag", "floxai-llm"],
  "provides": ["full-system", "web-ui", "api", "documentation"],
  "layerable": true,
  "standalone": true
}
EOF

echo "✅ Complete FloxAI system built successfully"
'''

