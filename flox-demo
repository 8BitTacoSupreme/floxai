#!/bin/bash
# FloxAI Interactive Demo - Flox Learning Journey
# This script guides users through Flox's complete feature set

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${BLUE}🎯 FloxAI Interactive Demo - Flox Learning Journey${NC}"
echo "========================================================"
echo -e "${CYAN}Learn Flox by building real projects with AI guidance${NC}"
echo ""

# Check if we're in a Flox environment
if [ -z "$FLOX_ENV" ]; then
    echo -e "${RED}❌ This demo requires a Flox environment${NC}"
    echo "   Run: flox activate"
    exit 1
fi

# Function to show demo options
show_demo_options() {
    echo -e "${PURPLE}Choose your Flox learning path:${NC}"
    echo ""
    echo "1. 🏗️  Enhance Existing Project"
    echo "   Start with your current project and add FloxAI layer"
    echo "   Get AI guidance to optimize your manifest.toml"
    echo ""
    echo "2. 🚀 Build Hello World Project"
    echo "   Start from scratch and build a complete Flox project"
    echo "   Learn: init → develop → build → publish → deploy"
    echo ""
    echo "3. 🎮 Feature Showcase"
    echo "   Interactive demonstration of Flox capabilities"
    echo "   See Flox in action without building anything"
    echo ""
    echo "4. ❓ What is Flox?"
    echo "   Learn about Flox concepts and benefits"
    echo ""
}

# Function to enhance existing project
enhance_existing_project() {
    echo -e "${GREEN}🏗️  Enhancing Your Existing Project${NC}"
    echo "====================================="
    echo ""
    
    # Check if we're in a project directory
    if [ ! -f "manifest.toml" ] && [ ! -f "package.json" ] && [ ! -f "Cargo.toml" ] && [ ! -f "pyproject.toml" ]; then
        echo -e "${YELLOW}⚠️  No project files detected in current directory${NC}"
        echo "   This demo works best when run in a project directory"
        echo "   Continue anyway? (y/N)"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            echo "   Demo cancelled. Run from a project directory for best results."
            return
        fi
    fi
    
    echo "🔍 Analyzing your current project..."
    
    # Detect project type
    PROJECT_TYPE="unknown"
    if [ -f "package.json" ]; then
        PROJECT_TYPE="nodejs"
        echo "   ✅ Node.js project detected"
    elif [ -f "Cargo.toml" ]; then
        PROJECT_TYPE="rust"
        echo "   ✅ Rust project detected"
    elif [ -f "pyproject.toml" ] || [ -f "requirements.txt" ]; then
        PROJECT_TYPE="python"
        echo "   ✅ Python project detected"
    elif [ -f "go.mod" ]; then
        PROJECT_TYPE="go"
        echo "   ✅ Go project detected"
    fi
    
    echo ""
    echo "🤖 FloxAI Layer Analysis:"
    echo "   Project Type: $PROJECT_TYPE"
    echo "   Environment: $FLOX_ENV_NAME"
    echo "   FloxAI Layer: ✅ Active"
    echo ""
    
    # Generate optimized manifest.toml
    echo "📝 Generating optimized manifest.toml for your project..."
    
    cat > manifest.toml << EOF
version = 1

# Generated by FloxAI for $PROJECT_TYPE project
[install]
EOF

    # Add packages based on project type
    case $PROJECT_TYPE in
        "nodejs")
            cat >> manifest.toml << 'EOF'
nodejs = { pkg-path = "nodejs" }
nodePackages.npm = { pkg-path = "nodePackages.npm" }
# Add your Node.js dependencies here
# Example: nodePackages.typescript = { pkg-path = "nodePackages.typescript" }
EOF
            ;;
        "rust")
            cat >> manifest.toml << 'EOF'
rustc = { pkg-path = "rustc" }
cargo = { pkg-path = "cargo" }
# Add your Rust dependencies here
# Example: rustPackages.serde = { pkg-path = "rustPackages.serde" }
EOF
            ;;
        "python")
            cat >> manifest.toml << 'EOF'
python313 = { pkg-path = "python313" }
"python313Packages.pip" = { pkg-path = "python313Packages.pip" }
# Add your Python dependencies here
# Example: "python313Packages.requests" = { pkg-path = "python313Packages.requests" }
EOF
            ;;
        "go")
            cat >> manifest.toml << 'EOF'
go = { pkg-path = "go" }
# Add your Go dependencies here
# Example: goPackages.gin = { pkg-path = "goPackages.gin" }
EOF
            ;;
    esac
    
    # Add common development tools
    cat >> manifest.toml << 'EOF'

# Development tools
git = { pkg-path = "git" }
curl = { pkg-path = "curl" }
jq = { pkg-path = "jq" }
tree = { pkg-path = "tree" }

[vars]
# Project-specific variables
PROJECT_TYPE = "$PROJECT_TYPE"
FLOXAI_LAYER = "true"

[profile]
common = '''
# FloxAI layer enhancements
export FLOXAI_CONTEXT_MODE=true
export FLOXAI_PROJECT_TYPE="$PROJECT_TYPE"
'''
EOF

    echo "   ✅ Generated manifest.toml"
    echo ""
    
    # Show next steps
    echo -e "${CYAN}🎯 Next Steps:${NC}"
    echo "1. Review the generated manifest.toml"
    echo "2. Run: flox edit manifest.toml"
    echo "3. Add your specific dependencies"
    echo "4. Run: flox install"
    echo "5. Run: floxai analyze (for AI suggestions)"
    echo ""
    
    # Ask if user wants to continue
    echo "Would you like to:"
    echo "  a) Edit the manifest now (flox edit manifest.toml)"
    echo "  b) Get AI suggestions for your project (floxai analyze)"
    echo "  c) Continue to build phase"
    echo "  d) Return to main menu"
    echo ""
    read -p "Choose (a/b/c/d): " choice
    
    case $choice in
        "a")
            echo "Opening manifest.toml for editing..."
            flox edit manifest.toml
            ;;
        "b")
            echo "Getting AI suggestions..."
            floxai analyze
            ;;
        "c")
            build_and_publish_demo
            ;;
        "d")
            return
            ;;
    esac
}

# Function to build hello world project
build_hello_world() {
    echo -e "${GREEN}🚀 Building Hello World Project${NC}"
    echo "=================================="
    echo ""
    
    # Create project directory
    PROJECT_NAME="floxai-hello-world"
    if [ -d "$PROJECT_NAME" ]; then
        echo -e "${YELLOW}⚠️  Directory $PROJECT_NAME already exists${NC}"
        echo "   Remove it first or choose a different name"
        read -p "Enter project name (or press Enter for $PROJECT_NAME): " new_name
        PROJECT_NAME="${new_name:-$PROJECT_NAME}"
    fi
    
    echo "📁 Creating project: $PROJECT_NAME"
    mkdir -p "$PROJECT_NAME"
    cd "$PROJECT_NAME"
    
    echo "🔧 Initializing Flox environment..."
    flox init
    
    echo "📝 Creating comprehensive manifest.toml..."
    cat > manifest.toml << 'EOF'
version = 1

# FloxAI Hello World Project
# Demonstrates: init → develop → build → publish → deploy

[install]
# Core language
python313 = { pkg-path = "python313" }
"python313Packages.pip" = { pkg-path = "python313Packages.pip" }

# Web framework
"python313Packages.fastapi" = { pkg-path = "python313Packages.fastapi" }
"python313Packages.uvicorn" = { pkg-path = "python313Packages.uvicorn" }

# Development tools
git = { pkg-path = "git" }
curl = { pkg-path = "curl" }
jq = { pkg-path = "jq" }
tree = { pkg-path = "tree" }

# Build tools
gnumake = { pkg-path = "gnumake" }

[vars]
PROJECT_NAME = "floxai-hello-world"
VERSION = "1.0.0"
PORT = "8000"

# Build configuration
[build.hello-world]
description = "FloxAI Hello World API"
version = "1.0.0"
command = '''
set -euo pipefail
mkdir -p "$out/bin"
cat > "$out/bin/hello-world" << 'HELLO_EOF'
#!/bin/bash
echo "Hello from FloxAI Hello World!"
echo "Built with Flox at $(date)"
echo "Environment: $FLOX_ENV_NAME"
echo "Platform: $(uname -m)-$(uname -s)"
HELLO_EOF
chmod +x "$out/bin/hello-world"
'''

# Service configuration
[services.hello-world]
command = "hello-world"
is-daemon = false

[profile]
common = '''
export PATH="$FLOX_ENV_PROJECT/bin:$PATH"
alias hello="hello-world"
alias build="flox build hello-world"
alias publish="flox publish hello-world"
'''
EOF

    echo "   ✅ Created manifest.toml"
    
    # Create hello world application
    echo "📄 Creating hello world application..."
    mkdir -p bin
    cat > bin/hello-world << 'EOF'
#!/bin/bash
echo "🌍 Hello from FloxAI Hello World!"
echo "================================="
echo "Built with Flox at $(date)"
echo "Environment: $FLOX_ENV_NAME"
echo "Platform: $(uname -m)-$(uname -s)"
echo "Project: $PROJECT_NAME"
echo "Version: $VERSION"
echo ""
echo "🎯 This demonstrates Flox's power for:"
echo "   ✓ Reproducible builds"
echo "   ✓ Cross-platform compatibility"
echo "   ✓ Service management"
echo "   ✓ Environment isolation"
echo ""
echo "🚀 Try these commands:"
echo "   flox build hello-world    # Build the project"
echo "   flox publish hello-world  # Publish to FloxHub"
echo "   hello-world               # Run the application"
EOF
    chmod +x bin/hello-world
    
    echo "   ✅ Created hello-world application"
    
    # Install packages
    echo "📦 Installing packages..."
    flox install
    
    echo ""
    echo -e "${CYAN}🎯 Development Phase Complete!${NC}"
    echo "   Project: $PROJECT_NAME"
    echo "   Environment: $FLOX_ENV_NAME"
    echo "   Manifest: ✅ Configured"
    echo "   Packages: ✅ Installed"
    echo ""
    
    # Show next steps
    echo -e "${PURPLE}Next: Build Phase${NC}"
    echo "1. Test the application: hello-world"
    echo "2. Build the project: flox build hello-world"
    echo "3. Publish to FloxHub: flox publish hello-world"
    echo ""
    
    # Ask if user wants to continue
    echo "Would you like to:"
    echo "  a) Test the application now"
    echo "  b) Build the project"
    echo "  c) Publish to FloxHub"
    echo "  d) Return to main menu"
    echo ""
    read -p "Choose (a/b/c/d): " choice
    
    case $choice in
        "a")
            echo "Testing application..."
            hello-world
            ;;
        "b")
            echo "Building project..."
            flox build hello-world
            ;;
        "c")
            echo "Publishing to FloxHub..."
            flox publish hello-world
            ;;
        "d")
            cd ..
            return
            ;;
    esac
}

# Function to show feature showcase
feature_showcase() {
    echo -e "${GREEN}🎮 Flox Feature Showcase${NC}"
    echo "========================="
    echo ""
    
    echo "🔍 Current Environment Analysis:"
    echo "   Environment: $FLOX_ENV_NAME"
    echo "   Platform: $(uname -m)-$(uname -s)"
    echo "   Python: $(python --version 2>/dev/null || echo 'Not available')"
    echo "   Node.js: $(node --version 2>/dev/null || echo 'Not available')"
    echo ""
    
    echo "📦 Flox-Managed Packages:"
    which python node git curl sqlite3 jq tree 2>/dev/null | sed 's/^/   ✓ /'
    echo ""
    
    echo "🌍 Cross-Platform Demonstration:"
    echo "   This exact environment works on:"
    echo "   ✓ macOS Intel (x86_64)"
    echo "   ✓ macOS Apple Silicon (ARM64)"
    echo "   ✓ Linux x86_64"
    echo "   ✓ Linux ARM64"
    echo ""
    
    echo "⚡ Flox Advantages:"
    echo "   ✓ Native binaries (no containerization)"
    echo "   ✓ Direct filesystem access"
    echo "   ✓ Full system integration"
    echo "   ✓ Reproducible everywhere"
    echo ""
    
    echo "🧠 FloxAI Vector RAG System:"
    echo "   ✓ ChromaDB vector database"
    echo "   ✓ 2,055 document chunks"
    echo "   ✓ Semantic search capabilities"
    echo "   ✓ Context-aware responses"
    echo ""
    
    echo "🚀 Flox Service Management:"
    echo "   ✓ Backend: FastAPI with hot reload"
    echo "   ✓ Frontend: React with Vite"
    echo "   ✓ Database: SQLite with Flox paths"
    echo "   ✓ AI: Claude integration"
    echo ""
    
    echo "💡 Why Flox Matters:"
    echo "   Before: Complex setup, dependency conflicts, platform differences"
    echo "   After:  One command, isolated environment, works everywhere"
    echo ""
}

# Function to explain Flox concepts
explain_flox() {
    echo -e "${GREEN}❓ What is Flox?${NC}"
    echo "=================="
    echo ""
    
    echo "🎯 Flox is a package manager and development environment tool that:"
    echo ""
    echo "1. **Creates Reproducible Environments**"
    echo "   - Same setup on macOS, Linux, different architectures"
    echo "   - No 'works on my machine' problems"
    echo "   - Identical dependencies everywhere"
    echo ""
    echo "2. **Manages Multi-Language Projects**"
    echo "   - Python, Node.js, Rust, Go in one environment"
    echo "   - Unified package management"
    echo "   - No language-specific package managers needed"
    echo ""
    echo "3. **Provides Service Management**"
    echo "   - Run multiple processes (APIs, databases, frontends)"
    echo "   - No Docker required"
    echo "   - Native performance"
    echo ""
    echo "4. **Enables Layer Composition**"
    echo "   - Add tools to existing environments"
    echo "   - FloxAI as a layer for AI assistance"
    echo "   - Modular development workflows"
    echo ""
    echo "5. **Supports Build and Publish**"
    echo "   - Build applications in isolated environments"
    echo "   - Publish to FloxHub for distribution"
    echo "   - Reproducible builds everywhere"
    echo ""
    echo "🔗 Learn more: https://flox.dev/docs"
    echo ""
}

# Main demo loop
while true; do
    show_demo_options
    read -p "Choose (1-4): " choice
    echo ""
    
    case $choice in
        "1")
            enhance_existing_project
            ;;
        "2")
            build_hello_world
            ;;
        "3")
            feature_showcase
            ;;
        "4")
            explain_flox
            ;;
        *)
            echo -e "${RED}Invalid choice. Please select 1-4.${NC}"
            ;;
    esac
    
    echo ""
    echo "Press Enter to continue or 'q' to quit..."
    read -r continue
    if [[ "$continue" == "q" ]]; then
        break
    fi
    echo ""
done

echo ""
echo -e "${BLUE}🎉 Thanks for exploring Flox with FloxAI!${NC}"
echo "   This demonstrates Flox's power for reproducible development"
echo "   Run 'floxai layer' for ongoing AI assistance"
echo ""
